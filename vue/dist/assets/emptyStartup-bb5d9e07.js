import{d as M,B as D,ah as Nr,r as j,k as Ue,ai as Vr,a as P,c as h,aj as oe,u as te,_ as De,ak as zr,al as cr,P as J,am as Mr,h as C,g as Wr,f as Kr,b as Jr,an as Zr,ao as Xr,ap as Yr,aq as Qr,j as lr,ar as ur,as as eo,at as ro,au as oo,av as so,A as pr,W as dr,ad as be,x as R,m as x,a3 as gr,af as mr,ae as hr,v as ue,aw as to,ax as no,ay as de,az as ao,aA as io,aB as co,N as O,X as Te,Y as U,R as $,S as v,aC as lo,ag as uo,M as po,aD as go,n as mo,aE as ho,aF as To,o as Eo,O as F,Q as T,Z as f,U as H,$ as z,aG as He,T as K,a2 as ae,I as ke,H as fo,t as bo,aH as vo,aI as _o,aJ as wo,V as yo}from"./index-85e14c47.js";import{V as ko}from"./Checkbox-f43b85d0.js";import{D as Po}from"./index-12eb53a2.js";/* empty css              */function Ne(r){var e=r.prefixCls,o=r.value,s=r.current,t=r.offset,a=t===void 0?0:t,n;return a&&(n={position:"absolute",top:"".concat(a,"00%"),left:0}),h("p",{style:n,class:oe("".concat(e,"-only-unit"),{current:s})},[o])}function Go(r,e,o){for(var s=r,t=0;(s+10)%10!==e;)s+=o,t+=o;return t}const Oo=M({compatConfig:{MODE:3},name:"SingleNumber",props:{prefixCls:String,value:String,count:Number},setup:function(e){var o=D(function(){return Number(e.value)}),s=D(function(){return Math.abs(e.count)}),t=Nr({prevValue:o.value,prevCount:s.value}),a=function(){t.prevValue=o.value,t.prevCount=s.value},n=j();return Ue(o,function(){clearTimeout(n.value),n.value=setTimeout(function(){a()},1e3)},{flush:"post"}),Vr(function(){clearTimeout(n.value)}),function(){var i,c={},p=o.value;if(t.prevValue===p||Number.isNaN(p)||Number.isNaN(t.prevValue))i=[Ne(P(P({},e),{},{current:!0}))],c={transition:"none"};else{i=[];for(var m=p+10,u=[],b=p;b<=m;b+=1)u.push(b);var y=u.findIndex(function(A){return A%10===t.prevValue});i=u.map(function(A,_){var l=A%10;return Ne(P(P({},e),{},{value:l,offset:_-y,current:_===y}))});var S=t.prevCount<s.value?1:-1;c={transform:"translateY(".concat(-Go(t.prevValue,p,S),"00%)")}}return h("span",{class:"".concat(e.prefixCls,"-only"),style:c,onTransitionend:function(){return a()}},[i])}}});var So=["prefixCls","count","title","show","component","class","style"],Ao={prefixCls:String,count:J.any,component:String,title:J.any,show:Boolean};const Ro=M({compatConfig:{MODE:3},name:"ScrollNumber",inheritAttrs:!1,props:Ao,setup:function(e,o){var s=o.attrs,t=o.slots,a=te("scroll-number",e),n=a.prefixCls;return function(){var i,c=P(P({},e),s);c.prefixCls;var p=c.count,m=c.title;c.show;var u=c.component,b=u===void 0?"sup":u,y=c.class,S=c.style,A=De(c,So),_=P(P({},A),{},{style:S,"data-show":e.show,class:oe(n.value,y),title:m}),l=p;if(p&&Number(p)%1===0){var E=String(p).split("");l=E.map(function(g,w){return h(Oo,{prefixCls:n.value,count:Number(p),value:g,key:E.length-w},null)})}S&&S.borderColor&&(_.style=P(P({},S),{},{boxShadow:"0 0 0 1px ".concat(S.borderColor," inset")}));var k=zr((i=t.default)===null||i===void 0?void 0:i.call(t));return k&&k.length?cr(k,{class:oe("".concat(n.value,"-custom-component"))},!1):h(b,_,{default:function(){return[l]}})}}});function le(r){return Mr.indexOf(r)!==-1}var Fo=["class","style"],Co=function(){return{prefix:String,color:{type:String},text:J.any,placement:{type:String,default:"end"}}};const Se=M({compatConfig:{MODE:3},name:"ABadgeRibbon",inheritAttrs:!1,props:Co(),slots:["text"],setup:function(e,o){var s=o.attrs,t=o.slots,a=te("ribbon",e),n=a.prefixCls,i=a.direction,c=D(function(){return le(e.color)}),p=D(function(){var m;return[n.value,"".concat(n.value,"-placement-").concat(e.placement),(m={},C(m,"".concat(n.value,"-rtl"),i.value==="rtl"),C(m,"".concat(n.value,"-color-").concat(e.color),c.value),m)]});return function(){var m,u,b=s.class,y=s.style,S=De(s,Fo),A={},_={};return e.color&&!c.value&&(A.background=e.color,_.color=e.color),h("div",P({class:"".concat(n.value,"-wrapper")},S),[(m=t.default)===null||m===void 0?void 0:m.call(t),h("div",{class:[p.value,b],style:P(P({},A),y)},[h("span",{class:"".concat(n.value,"-text")},[e.text||((u=t.text)===null||u===void 0?void 0:u.call(t))]),h("div",{class:"".concat(n.value,"-corner"),style:_},null)])])}}});var Uo=function(e){return!isNaN(parseFloat(e))&&isFinite(e)};const Do=Uo;var Lo=function(){return{count:J.any,showZero:{type:Boolean,default:void 0},overflowCount:{type:Number,default:99},dot:{type:Boolean,default:void 0},prefixCls:String,scrollNumberPrefixCls:String,status:{type:String},size:{type:String,default:"default"},color:String,text:J.any,offset:Array,numberStyle:{type:Object,default:void 0},title:String}};const Ee=M({compatConfig:{MODE:3},name:"ABadge",Ribbon:Se,inheritAttrs:!1,props:Lo(),slots:["text","count"],setup:function(e,o){var s=o.slots,t=o.attrs,a=te("badge",e),n=a.prefixCls,i=a.direction,c=D(function(){return e.count>e.overflowCount?"".concat(e.overflowCount,"+"):e.count}),p=D(function(){return e.status!==null&&e.status!==void 0||e.color!==null&&e.color!==void 0}),m=D(function(){return c.value==="0"||c.value===0}),u=D(function(){return e.dot&&!m.value}),b=D(function(){return u.value?"":c.value}),y=D(function(){var g=b.value===null||b.value===void 0||b.value==="";return(g||m.value&&!e.showZero)&&!u.value}),S=j(e.count),A=j(b.value),_=j(u.value);Ue([function(){return e.count},b,u],function(){y.value||(S.value=e.count,A.value=b.value,_.value=u.value)},{immediate:!0});var l=D(function(){var g;return g={},C(g,"".concat(n.value,"-status-dot"),p.value),C(g,"".concat(n.value,"-status-").concat(e.status),!!e.status),C(g,"".concat(n.value,"-status-").concat(e.color),le(e.color)),g}),E=D(function(){return e.color&&!le(e.color)?{background:e.color}:{}}),k=D(function(){var g;return g={},C(g,"".concat(n.value,"-dot"),_.value),C(g,"".concat(n.value,"-count"),!_.value),C(g,"".concat(n.value,"-count-sm"),e.size==="small"),C(g,"".concat(n.value,"-multiple-words"),!_.value&&A.value&&A.value.toString().length>1),C(g,"".concat(n.value,"-status-").concat(e.status),!!e.status),C(g,"".concat(n.value,"-status-").concat(e.color),le(e.color)),g});return function(){var g,w,q,L=e.offset,I=e.title,V=e.color,Z=t.style,W=Wr(s,e,"text"),d=n.value,G=S.value,B=Kr((g=s.default)===null||g===void 0?void 0:g.call(s));B=B.length?B:null;var ye=!!(!y.value||s.count),ge=function(){if(!L)return P({},Z);var he={marginTop:Do(L[1])?"".concat(L[1],"px"):L[1]};return i.value==="rtl"?he.left="".concat(parseInt(L[0],10),"px"):he.right="".concat(-parseInt(L[0],10),"px"),P(P({},he),Z)}(),jr=I??(typeof G=="string"||typeof G=="number"?G:void 0),$r=ye||!W?null:h("span",{class:"".concat(d,"-status-text")},[W]),qr=Jr(G)==="object"||G===void 0&&s.count?cr(G??((w=s.count)===null||w===void 0?void 0:w.call(s)),{style:ge},!1):null,Be=oe(d,(q={},C(q,"".concat(d,"-status"),p.value),C(q,"".concat(d,"-not-a-wrapper"),!B),C(q,"".concat(d,"-rtl"),i.value==="rtl"),q),t.class);if(!B&&p.value){var Br=ge.color;return h("span",P(P({},t),{},{class:Be,style:ge}),[h("span",{class:l.value,style:E.value},null),h("span",{style:{color:Br},class:"".concat(d,"-status-text")},[W])])}var Hr=Zr(B?"".concat(d,"-zoom"):"",{appear:!1}),me=P(P({},ge),e.numberStyle);return V&&!le(V)&&(me=me||{},me.background=V),h("span",P(P({},t),{},{class:Be}),[B,h(Xr,Hr,{default:function(){return[Yr(h(Ro,{prefixCls:e.scrollNumberPrefixCls,show:ye,class:k.value,count:A.value,title:jr,style:me,key:"scrollNumber"},{default:function(){return[qr]}}),[[Qr,ye]])]}}),$r])}}});Ee.install=function(r){return r.component(Ee.name,Ee),r.component(Se.name,Se),r};var Io=["prefixCls","id"],Tr=function(){return{prefixCls:String,checked:{type:Boolean,default:void 0},disabled:{type:Boolean,default:void 0},isGroup:{type:Boolean,default:void 0},value:J.any,name:String,id:String,autofocus:{type:Boolean,default:void 0},onChange:Function,onFocus:Function,onBlur:Function,onClick:Function,"onUpdate:checked":Function,"onUpdate:value":Function}};const N=M({compatConfig:{MODE:3},name:"ARadio",props:Tr(),setup:function(e,o){var s=o.emit,t=o.expose,a=o.slots,n=lr(),i=j(),c=ur("radioGroupContext",void 0),p=te("radio",e),m=p.prefixCls,u=p.direction,b=function(){i.value.focus()},y=function(){i.value.blur()};t({focus:b,blur:y});var S=function(l){var E=l.target.checked;s("update:checked",E),s("update:value",E),s("change",l),n.onFieldChange()},A=function(l){s("change",l),c&&c.onRadioChange&&c.onRadioChange(l)};return function(){var _,l=c;e.prefixCls;var E=e.id,k=E===void 0?n.id.value:E,g=De(e,Io),w=P({prefixCls:m.value,id:k},eo(g,["onUpdate:checked","onUpdate:value"]));l?(w.name=l.props.name,w.onChange=A,w.checked=e.value===l.stateValue.value,w.disabled=e.disabled||l.props.disabled):w.onChange=S;var q=oe((_={},C(_,"".concat(m.value,"-wrapper"),!0),C(_,"".concat(m.value,"-wrapper-checked"),w.checked),C(_,"".concat(m.value,"-wrapper-disabled"),w.disabled),C(_,"".concat(m.value,"-wrapper-rtl"),u.value==="rtl"),_));return h("label",{class:q},[h(ko,P(P({},w),{},{type:"radio",ref:i}),null),a.default&&h("span",null,[a.default()])])}}});var xo=oo("large","default","small"),jo=function(){return{prefixCls:String,value:J.any,size:J.oneOf(xo),options:{type:Array},disabled:{type:Boolean,default:void 0},name:String,buttonStyle:{type:String,default:"outline"},id:String,optionType:{type:String,default:"default"},onChange:Function,"onUpdate:value":Function}};const Le=M({compatConfig:{MODE:3},name:"ARadioGroup",props:jo(),setup:function(e,o){var s=o.slots,t=o.emit,a=lr(),n=te("radio",e),i=n.prefixCls,c=n.direction,p=n.size,m=j(e.value),u=j(!1);Ue(function(){return e.value},function(y){m.value=y,u.value=!1});var b=function(S){var A=m.value,_=S.target.value;"value"in e||(m.value=_),!u.value&&_!==A&&(u.value=!0,t("update:value",_),t("change",S),a.onFieldChange()),so(function(){u.value=!1})};return ro("radioGroupContext",{onRadioChange:b,stateValue:m,props:e}),function(){var y,S=e.options,A=e.optionType,_=e.buttonStyle,l=e.id,E=l===void 0?a.id.value:l,k="".concat(i.value,"-group"),g=oe(k,"".concat(k,"-").concat(_),(y={},C(y,"".concat(k,"-").concat(p.value),p.value),C(y,"".concat(k,"-rtl"),c.value==="rtl"),y)),w=null;if(S&&S.length>0){var q=A==="button"?"".concat(i.value,"-button"):i.value;w=S.map(function(I){if(typeof I=="string"||typeof I=="number")return h(N,{key:I,prefixCls:q,disabled:e.disabled,value:I,checked:m.value===I},{default:function(){return[I]}});var V=I.value,Z=I.disabled,W=I.label;return h(N,{key:"radio-group-value-options-".concat(V),prefixCls:q,disabled:Z||e.disabled,value:V,checked:m.value===V},{default:function(){return[W]}})})}else{var L;w=(L=s.default)===null||L===void 0?void 0:L.call(s)}return h("div",{class:g,id:E},[w])}}}),pe=M({compatConfig:{MODE:3},name:"ARadioButton",props:Tr(),setup:function(e,o){var s=o.slots,t=te("radio-button",e),a=t.prefixCls,n=ur("radioGroupContext",void 0);return function(){var i,c=P(P({},e),{},{prefixCls:a.value});return n&&(c.onChange=n.onRadioChange,c.checked=c.value===n.stateValue.value,c.disabled=c.disabled||n.props.disabled),h(N,c,{default:function(){return[(i=s.default)===null||i===void 0?void 0:i.call(s)]}})}}});N.Group=Le;N.Button=pe;N.install=function(r){return r.component(N.name,N),r.component(N.Group.name,N.Group),r.component(N.Button.name,N.Button),r};var $o={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M688 312v-48c0-4.4-3.6-8-8-8H296c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h384c4.4 0 8-3.6 8-8zm-392 88c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H296zm376 116c-119.3 0-216 96.7-216 216s96.7 216 216 216 216-96.7 216-216-96.7-216-216-216zm107.5 323.5C750.8 868.2 712.6 884 672 884s-78.8-15.8-107.5-44.5C535.8 810.8 520 772.6 520 732s15.8-78.8 44.5-107.5C593.2 595.8 631.4 580 672 580s78.8 15.8 107.5 44.5C808.2 653.2 824 691.4 824 732s-15.8 78.8-44.5 107.5zM761 656h-44.3c-2.6 0-5 1.2-6.5 3.3l-63.5 87.8-23.1-31.9a7.92 7.92 0 00-6.5-3.3H573c-6.5 0-10.3 7.4-6.5 12.7l73.8 102.1c3.2 4.4 9.7 4.4 12.9 0l114.2-158c3.9-5.3.1-12.7-6.4-12.7zM440 852H208V148h560v344c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V108c0-17.7-14.3-32-32-32H168c-17.7 0-32 14.3-32 32v784c0 17.7 14.3 32 32 32h272c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z"}}]},name:"file-done",theme:"outlined"};const qo=$o;function Ve(r){for(var e=1;e<arguments.length;e++){var o=arguments[e]!=null?Object(arguments[e]):{},s=Object.keys(o);typeof Object.getOwnPropertySymbols=="function"&&(s=s.concat(Object.getOwnPropertySymbols(o).filter(function(t){return Object.getOwnPropertyDescriptor(o,t).enumerable}))),s.forEach(function(t){Bo(r,t,o[t])})}return r}function Bo(r,e,o){return e in r?Object.defineProperty(r,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[e]=o,r}var Ie=function(e,o){var s=Ve({},e,o.attrs);return h(pr,Ve({},s,{icon:qo}),null)};Ie.displayName="FileDoneOutlined";Ie.inheritAttrs=!1;const Ho=Ie;var No={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M832 464h-68V240c0-70.7-57.3-128-128-128H388c-70.7 0-128 57.3-128 128v224h-68c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V496c0-17.7-14.3-32-32-32zM332 240c0-30.9 25.1-56 56-56h248c30.9 0 56 25.1 56 56v224H332V240zm460 600H232V536h560v304zM484 701v53c0 4.4 3.6 8 8 8h40c4.4 0 8-3.6 8-8v-53a48.01 48.01 0 10-56 0z"}}]},name:"lock",theme:"outlined"};const Vo=No;function ze(r){for(var e=1;e<arguments.length;e++){var o=arguments[e]!=null?Object(arguments[e]):{},s=Object.keys(o);typeof Object.getOwnPropertySymbols=="function"&&(s=s.concat(Object.getOwnPropertySymbols(o).filter(function(t){return Object.getOwnPropertyDescriptor(o,t).enumerable}))),s.forEach(function(t){zo(r,t,o[t])})}return r}function zo(r,e,o){return e in r?Object.defineProperty(r,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[e]=o,r}var xe=function(e,o){var s=ze({},e,o.attrs);return h(pr,ze({},s,{icon:Vo}),null)};xe.displayName="LockOutlined";xe.inheritAttrs=!1;const Me=xe;const Pe=async(r,e)=>{const o=dr(),s=j(e??""),t=j(r),a=async()=>{const n=await co({directory:!0,defaultPath:e});if(typeof n=="string")s.value=n;else return};s.value=await new Promise(n=>{be.confirm({title:R("inputTargetFolderPath"),width:"800px",content:()=>{var i;return x("div",[(i=o.conf)!=null&&i.enable_access_control?x("a",{style:{"word-break":"break-all","margin-bottom":"4px",display:"block"},target:"_blank",href:"https://github.com/zanllp/sd-webui-infinite-image-browsing/issues/518"},"Please open this link first (Access Control mode only)"):"",gr?x(mr,{onClick:a,style:{margin:"4px 0"}},R("selectFolder")):"",x(hr,{value:s.value,"onUpdate:value":c=>s.value=c}),x("div",[x("span",R("type")+": "),x(Le,{value:t.value,"onUpdate:value":c=>t.value=c,buttonStyle:"solid",style:{margin:"16px 0 32px"}},[x(pe,{value:"walk"},"Walk"),x(pe,{value:"scanned"},"Normal"),x(pe,{value:"scanned-fixed"},"Fixed")])]),x("p","Walk: "+R("walkModeDoc")),x("p","Normal: "+R("normalModelDoc")),x("p","Fixed: "+R("fixedModeDoc"))])},async onOk(){if(!s.value)throw ue.error(R("pathIsEmpty")),new Error("pathIsEmpty");(await to([s.value]))[s.value]?n(s.value):ue.error(R("pathDoesNotExist"))}})}),be.confirm({content:R("confirmToAddToExtraPath"),async onOk(){await no({types:[t.value],path:s.value}),ue.success(R("addCompleted")),de.emit("searchIndexExpired"),de.emit("updateGlobalSetting")}})},We=(r,e)=>{be.confirm({content:R("confirmDelete"),closable:!0,async onOk(){await ao({types:[e],path:r}),ue.success(R("removeCompleted")),de.emit("searchIndexExpired"),de.emit("updateGlobalSetting")}})},Ke=r=>{const e=j("");be.confirm({title:R("inputAlias"),content:()=>x("div",[x("div",{style:{"word-break":"break-all","margin-bottom":"4px"}},"Path: "+r),x(hr,{value:e.value,"onUpdate:value":o=>e.value=o})]),async onOk(){await io({alias:e.value,path:r}),ue.success(R("addAliasCompleted")),de.emit("updateGlobalSetting")}})},Je=M({__name:"actionContextMenu",emits:["openOnTheRight","openInNewTab"],setup(r,{emit:e}){const o=s=>{switch(s.key.toString()){case"openOnTheRight":e("openOnTheRight");break;case"openInNewTab":e("openInNewTab");break}};return(s,t)=>{const a=uo,n=po,i=Po;return O(),Te(i,{trigger:["contextmenu"]},{overlay:U(()=>[h(n,{onClick:o},{default:U(()=>[h(a,{key:"openOnTheRight"},{default:U(()=>[$(v(s.$t("openOnTheRight")),1)]),_:1}),h(a,{key:"openInNewTab"},{default:U(()=>[$(v(s.$t("openInNewTab")),1)]),_:1})]),_:1})]),default:U(()=>[lo(s.$slots,"default")]),_:3})}}});function ve(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&process.version!==void 0?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}var _e={exports:{}},Mo=Er;function Er(r,e,o,s){if(typeof o!="function")throw new Error("method for before hook must be a function");return s||(s={}),Array.isArray(e)?e.reverse().reduce(function(t,a){return Er.bind(null,r,a,t,s)},o)():Promise.resolve().then(function(){return r.registry[e]?r.registry[e].reduce(function(t,a){return a.hook.bind(null,t,s)},o)():o(s)})}var Wo=Ko;function Ko(r,e,o,s){var t=s;r.registry[o]||(r.registry[o]=[]),e==="before"&&(s=function(a,n){return Promise.resolve().then(t.bind(null,n)).then(a.bind(null,n))}),e==="after"&&(s=function(a,n){var i;return Promise.resolve().then(a.bind(null,n)).then(function(c){return i=c,t(i,n)}).then(function(){return i})}),e==="error"&&(s=function(a,n){return Promise.resolve().then(a.bind(null,n)).catch(function(i){return t(i,n)})}),r.registry[o].push({hook:s,orig:t})}var Jo=Zo;function Zo(r,e,o){if(r.registry[e]){var s=r.registry[e].map(function(t){return t.orig}).indexOf(o);s!==-1&&r.registry[e].splice(s,1)}}var fr=Mo,Xo=Wo,Yo=Jo,Ze=Function.bind,Xe=Ze.bind(Ze);function br(r,e,o){var s=Xe(Yo,null).apply(null,o?[e,o]:[e]);r.api={remove:s},r.remove=s,["before","error","after","wrap"].forEach(function(t){var a=o?[e,t,o]:[e,t];r[t]=r.api[t]=Xe(Xo,null).apply(null,a)})}function Qo(){var r="h",e={registry:{}},o=fr.bind(null,e,r);return br(o,e,r),o}function vr(){var r={registry:{}},e=fr.bind(null,r);return br(e,r),e}var Ye=!1;function ne(){return Ye||(console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'),Ye=!0),vr()}ne.Singular=Qo.bind();ne.Collection=vr.bind();_e.exports=ne;_e.exports.Hook=ne;_e.exports.Singular=ne.Singular;var es=_e.exports.Collection=ne.Collection,rs="9.0.5",os=`octokit-endpoint.js/${rs} ${ve()}`,ss={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":os},mediaType:{format:""}};function ts(r){return r?Object.keys(r).reduce((e,o)=>(e[o.toLowerCase()]=r[o],e),{}):{}}function ns(r){if(typeof r!="object"||r===null||Object.prototype.toString.call(r)!=="[object Object]")return!1;const e=Object.getPrototypeOf(r);if(e===null)return!0;const o=Object.prototype.hasOwnProperty.call(e,"constructor")&&e.constructor;return typeof o=="function"&&o instanceof o&&Function.prototype.call(o)===Function.prototype.call(r)}function _r(r,e){const o=Object.assign({},r);return Object.keys(e).forEach(s=>{ns(e[s])?s in r?o[s]=_r(r[s],e[s]):Object.assign(o,{[s]:e[s]}):Object.assign(o,{[s]:e[s]})}),o}function Qe(r){for(const e in r)r[e]===void 0&&delete r[e];return r}function Ae(r,e,o){var t;if(typeof e=="string"){let[a,n]=e.split(" ");o=Object.assign(n?{method:a,url:n}:{url:a},o)}else o=Object.assign({},e);o.headers=ts(o.headers),Qe(o),Qe(o.headers);const s=_r(r||{},o);return o.url==="/graphql"&&(r&&((t=r.mediaType.previews)!=null&&t.length)&&(s.mediaType.previews=r.mediaType.previews.filter(a=>!s.mediaType.previews.includes(a)).concat(s.mediaType.previews)),s.mediaType.previews=(s.mediaType.previews||[]).map(a=>a.replace(/-preview/,""))),s}function as(r,e){const o=/\?/.test(r)?"&":"?",s=Object.keys(e);return s.length===0?r:r+o+s.map(t=>t==="q"?"q="+e.q.split("+").map(encodeURIComponent).join("+"):`${t}=${encodeURIComponent(e[t])}`).join("&")}var is=/\{[^}]+\}/g;function cs(r){return r.replace(/^\W+|\W+$/g,"").split(/,/)}function ls(r){const e=r.match(is);return e?e.map(cs).reduce((o,s)=>o.concat(s),[]):[]}function er(r,e){const o={__proto__:null};for(const s of Object.keys(r))e.indexOf(s)===-1&&(o[s]=r[s]);return o}function wr(r){return r.split(/(%[0-9A-Fa-f]{2})/g).map(function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e}).join("")}function re(r){return encodeURIComponent(r).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function ie(r,e,o){return e=r==="+"||r==="#"?wr(e):re(e),o?re(o)+"="+e:e}function Y(r){return r!=null}function Ge(r){return r===";"||r==="&"||r==="?"}function us(r,e,o,s){var t=r[o],a=[];if(Y(t)&&t!=="")if(typeof t=="string"||typeof t=="number"||typeof t=="boolean")t=t.toString(),s&&s!=="*"&&(t=t.substring(0,parseInt(s,10))),a.push(ie(e,t,Ge(e)?o:""));else if(s==="*")Array.isArray(t)?t.filter(Y).forEach(function(n){a.push(ie(e,n,Ge(e)?o:""))}):Object.keys(t).forEach(function(n){Y(t[n])&&a.push(ie(e,t[n],n))});else{const n=[];Array.isArray(t)?t.filter(Y).forEach(function(i){n.push(ie(e,i))}):Object.keys(t).forEach(function(i){Y(t[i])&&(n.push(re(i)),n.push(ie(e,t[i].toString())))}),Ge(e)?a.push(re(o)+"="+n.join(",")):n.length!==0&&a.push(n.join(","))}else e===";"?Y(t)&&a.push(re(o)):t===""&&(e==="&"||e==="?")?a.push(re(o)+"="):t===""&&a.push("");return a}function ps(r){return{expand:ds.bind(null,r)}}function ds(r,e){var o=["+","#",".","/",";","?","&"];return r=r.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(s,t,a){if(t){let i="";const c=[];if(o.indexOf(t.charAt(0))!==-1&&(i=t.charAt(0),t=t.substr(1)),t.split(/,/g).forEach(function(p){var m=/([^:\*]*)(?::(\d+)|(\*))?/.exec(p);c.push(us(e,i,m[1],m[2]||m[3]))}),i&&i!=="+"){var n=",";return i==="?"?n="&":i!=="#"&&(n=i),(c.length!==0?i:"")+c.join(n)}else return c.join(",")}else return wr(a)}),r==="/"?r:r.replace(/\/$/,"")}function yr(r){var m;let e=r.method.toUpperCase(),o=(r.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),s=Object.assign({},r.headers),t,a=er(r,["method","baseUrl","url","headers","request","mediaType"]);const n=ls(o);o=ps(o).expand(a),/^http/.test(o)||(o=r.baseUrl+o);const i=Object.keys(r).filter(u=>n.includes(u)).concat("baseUrl"),c=er(a,i);if(!/application\/octet-stream/i.test(s.accept)&&(r.mediaType.format&&(s.accept=s.accept.split(/,/).map(u=>u.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${r.mediaType.format}`)).join(",")),o.endsWith("/graphql")&&(m=r.mediaType.previews)!=null&&m.length)){const u=s.accept.match(/[\w-]+(?=-preview)/g)||[];s.accept=u.concat(r.mediaType.previews).map(b=>{const y=r.mediaType.format?`.${r.mediaType.format}`:"+json";return`application/vnd.github.${b}-preview${y}`}).join(",")}return["GET","HEAD"].includes(e)?o=as(o,c):"data"in c?t=c.data:Object.keys(c).length&&(t=c),!s["content-type"]&&typeof t<"u"&&(s["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(e)&&typeof t>"u"&&(t=""),Object.assign({method:e,url:o,headers:s},typeof t<"u"?{body:t}:null,r.request?{request:r.request}:null)}function gs(r,e,o){return yr(Ae(r,e,o))}function kr(r,e){const o=Ae(r,e),s=gs.bind(null,o);return Object.assign(s,{DEFAULTS:o,defaults:kr.bind(null,o),merge:Ae.bind(null,o),parse:yr})}var ms=kr(null,ss);class rr extends Error{constructor(e){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="Deprecation"}}var je={exports:{}},hs=Pr;function Pr(r,e){if(r&&e)return Pr(r)(e);if(typeof r!="function")throw new TypeError("need wrapper function");return Object.keys(r).forEach(function(s){o[s]=r[s]}),o;function o(){for(var s=new Array(arguments.length),t=0;t<s.length;t++)s[t]=arguments[t];var a=r.apply(this,s),n=s[s.length-1];return typeof a=="function"&&a!==n&&Object.keys(n).forEach(function(i){a[i]=n[i]}),a}}var Gr=hs;je.exports=Gr(fe);je.exports.strict=Gr(Or);fe.proto=fe(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return fe(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return Or(this)},configurable:!0})});function fe(r){var e=function(){return e.called?e.value:(e.called=!0,e.value=r.apply(this,arguments))};return e.called=!1,e}function Or(r){var e=function(){if(e.called)throw new Error(e.onceError);return e.called=!0,e.value=r.apply(this,arguments)},o=r.name||"Function wrapped with `once`";return e.onceError=o+" shouldn't be called more than once",e.called=!1,e}var Ts=je.exports;const Sr=go(Ts);var Es=Sr(r=>console.warn(r)),fs=Sr(r=>console.warn(r)),ce=class extends Error{constructor(r,e,o){super(r),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=e;let s;"headers"in o&&typeof o.headers<"u"&&(s=o.headers),"response"in o&&(this.response=o.response,s=o.response.headers);const t=Object.assign({},o.request);o.request.headers.authorization&&(t.headers=Object.assign({},o.request.headers,{authorization:o.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),t.url=t.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=t,Object.defineProperty(this,"code",{get(){return Es(new rr("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),e}}),Object.defineProperty(this,"headers",{get(){return fs(new rr("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),s||{}}})}},bs="8.4.0";function vs(r){if(typeof r!="object"||r===null||Object.prototype.toString.call(r)!=="[object Object]")return!1;const e=Object.getPrototypeOf(r);if(e===null)return!0;const o=Object.prototype.hasOwnProperty.call(e,"constructor")&&e.constructor;return typeof o=="function"&&o instanceof o&&Function.prototype.call(o)===Function.prototype.call(r)}function _s(r){return r.arrayBuffer()}function or(r){var i,c,p,m;const e=r.request&&r.request.log?r.request.log:console,o=((i=r.request)==null?void 0:i.parseSuccessResponseBody)!==!1;(vs(r.body)||Array.isArray(r.body))&&(r.body=JSON.stringify(r.body));let s={},t,a,{fetch:n}=globalThis;if((c=r.request)!=null&&c.fetch&&(n=r.request.fetch),!n)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");return n(r.url,{method:r.method,body:r.body,redirect:(p=r.request)==null?void 0:p.redirect,headers:r.headers,signal:(m=r.request)==null?void 0:m.signal,...r.body&&{duplex:"half"}}).then(async u=>{a=u.url,t=u.status;for(const b of u.headers)s[b[0]]=b[1];if("deprecation"in s){const b=s.link&&s.link.match(/<([^>]+)>; rel="deprecation"/),y=b&&b.pop();e.warn(`[@octokit/request] "${r.method} ${r.url}" is deprecated. It is scheduled to be removed on ${s.sunset}${y?`. See ${y}`:""}`)}if(!(t===204||t===205)){if(r.method==="HEAD"){if(t<400)return;throw new ce(u.statusText,t,{response:{url:a,status:t,headers:s,data:void 0},request:r})}if(t===304)throw new ce("Not modified",t,{response:{url:a,status:t,headers:s,data:await Oe(u)},request:r});if(t>=400){const b=await Oe(u);throw new ce(ws(b),t,{response:{url:a,status:t,headers:s,data:b},request:r})}return o?await Oe(u):u.body}}).then(u=>({status:t,url:a,headers:s,data:u})).catch(u=>{if(u instanceof ce)throw u;if(u.name==="AbortError")throw u;let b=u.message;throw u.name==="TypeError"&&"cause"in u&&(u.cause instanceof Error?b=u.cause.message:typeof u.cause=="string"&&(b=u.cause)),new ce(b,500,{request:r})})}async function Oe(r){const e=r.headers.get("content-type");return/application\/json/.test(e)?r.json().catch(()=>r.text()).catch(()=>""):!e||/^text\/|charset=utf-8$/.test(e)?r.text():_s(r)}function ws(r){if(typeof r=="string")return r;let e;return"documentation_url"in r?e=` - ${r.documentation_url}`:e="","message"in r?Array.isArray(r.errors)?`${r.message}: ${r.errors.map(JSON.stringify).join(", ")}${e}`:`${r.message}${e}`:`Unknown error: ${JSON.stringify(r)}`}function Re(r,e){const o=r.defaults(e);return Object.assign(function(t,a){const n=o.merge(t,a);if(!n.request||!n.request.hook)return or(o.parse(n));const i=(c,p)=>or(o.parse(o.merge(c,p)));return Object.assign(i,{endpoint:o,defaults:Re.bind(null,o)}),n.request.hook(i,n)},{endpoint:o,defaults:Re.bind(null,o)})}var Fe=Re(ms,{headers:{"user-agent":`octokit-request.js/${bs} ${ve()}`}}),ys="7.1.0";function ks(r){return`Request failed due to following response errors:
`+r.errors.map(e=>` - ${e.message}`).join(`
`)}var Ps=class extends Error{constructor(r,e,o){super(ks(o)),this.request=r,this.headers=e,this.response=o,this.name="GraphqlResponseError",this.errors=o.errors,this.data=o.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Gs=["method","baseUrl","url","headers","request","query","mediaType"],Os=["query","method","url"],sr=/\/api\/v3\/?$/;function Ss(r,e,o){if(o){if(typeof e=="string"&&"query"in o)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const n in o)if(Os.includes(n))return Promise.reject(new Error(`[@octokit/graphql] "${n}" cannot be used as variable name`))}const s=typeof e=="string"?Object.assign({query:e},o):e,t=Object.keys(s).reduce((n,i)=>Gs.includes(i)?(n[i]=s[i],n):(n.variables||(n.variables={}),n.variables[i]=s[i],n),{}),a=s.baseUrl||r.endpoint.DEFAULTS.baseUrl;return sr.test(a)&&(t.url=a.replace(sr,"/api/graphql")),r(t).then(n=>{if(n.data.errors){const i={};for(const c of Object.keys(n.headers))i[c]=n.headers[c];throw new Ps(t,i,n.data)}return n.data.data})}function $e(r,e){const o=r.defaults(e);return Object.assign((t,a)=>Ss(o,t,a),{defaults:$e.bind(null,o),endpoint:o.endpoint})}$e(Fe,{headers:{"user-agent":`octokit-graphql.js/${ys} ${ve()}`},method:"POST",url:"/graphql"});function As(r){return $e(r,{method:"POST",url:"/graphql"})}var Rs=/^v1\./,Fs=/^ghs_/,Cs=/^ghu_/;async function Us(r){const e=r.split(/\./).length===3,o=Rs.test(r)||Fs.test(r),s=Cs.test(r);return{type:"token",token:r,tokenType:e?"app":o?"installation":s?"user-to-server":"oauth"}}function Ds(r){return r.split(/\./).length===3?`bearer ${r}`:`token ${r}`}async function Ls(r,e,o,s){const t=e.endpoint.merge(o,s);return t.headers.authorization=Ds(r),e(t)}var Is=function(e){if(!e)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof e!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return e=e.replace(/^(token|bearer) +/i,""),Object.assign(Us.bind(null,e),{hook:Ls.bind(null,e)})},Ar="5.2.0",tr=()=>{},xs=console.warn.bind(console),js=console.error.bind(console),nr=`octokit-core.js/${Ar} ${ve()}`,se,$s=(se=class{static defaults(e){return class extends this{constructor(...s){const t=s[0]||{};if(typeof e=="function"){super(e(t));return}super(Object.assign({},e,t,t.userAgent&&e.userAgent?{userAgent:`${t.userAgent} ${e.userAgent}`}:null))}}}static plugin(...e){var t;const o=this.plugins;return t=class extends this{},(()=>{t.plugins=o.concat(e.filter(n=>!o.includes(n)))})(),t}constructor(e={}){const o=new es,s={baseUrl:Fe.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},e.request,{hook:o.bind(null,"request")}),mediaType:{previews:[],format:""}};if(s.headers["user-agent"]=e.userAgent?`${e.userAgent} ${nr}`:nr,e.baseUrl&&(s.baseUrl=e.baseUrl),e.previews&&(s.mediaType.previews=e.previews),e.timeZone&&(s.headers["time-zone"]=e.timeZone),this.request=Fe.defaults(s),this.graphql=As(this.request).defaults(s),this.log=Object.assign({debug:tr,info:tr,warn:xs,error:js},e.log),this.hook=o,e.authStrategy){const{authStrategy:a,...n}=e,i=a(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:n},e.auth));o.wrap("request",i.hook),this.auth=i}else if(!e.auth)this.auth=async()=>({type:"unauthenticated"});else{const a=Is(e.auth);o.wrap("request",a.hook),this.auth=a}const t=this.constructor;for(let a=0;a<t.plugins.length;++a)Object.assign(this,t.plugins[a](this,e))}},(()=>{se.VERSION=Ar})(),(()=>{se.plugins=[]})(),se),qs="4.0.1";function Rr(r){r.hook.wrap("request",(e,o)=>{r.log.debug("request",o);const s=Date.now(),t=r.request.endpoint.parse(o),a=t.url.replace(o.baseUrl,"");return e(o).then(n=>(r.log.info(`${t.method} ${a} - ${n.status} in ${Date.now()-s}ms`),n)).catch(n=>{throw r.log.info(`${t.method} ${a} - ${n.status} in ${Date.now()-s}ms`),n})})}Rr.VERSION=qs;var Bs="11.3.1";function Hs(r){if(!r.data)return{...r,data:[]};if(!("total_count"in r.data&&!("url"in r.data)))return r;const o=r.data.incomplete_results,s=r.data.repository_selection,t=r.data.total_count;delete r.data.incomplete_results,delete r.data.repository_selection,delete r.data.total_count;const a=Object.keys(r.data)[0],n=r.data[a];return r.data=n,typeof o<"u"&&(r.data.incomplete_results=o),typeof s<"u"&&(r.data.repository_selection=s),r.data.total_count=t,r}function qe(r,e,o){const s=typeof e=="function"?e.endpoint(o):r.request.endpoint(e,o),t=typeof e=="function"?e:r.request,a=s.method,n=s.headers;let i=s.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!i)return{done:!0};try{const c=await t({method:a,url:i,headers:n}),p=Hs(c);return i=((p.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:p}}catch(c){if(c.status!==409)throw c;return i="",{value:{status:200,headers:{},data:[]}}}}})}}function Fr(r,e,o,s){return typeof o=="function"&&(s=o,o=void 0),Cr(r,[],qe(r,e,o)[Symbol.asyncIterator](),s)}function Cr(r,e,o,s){return o.next().then(t=>{if(t.done)return e;let a=!1;function n(){a=!0}return e=e.concat(s?s(t.value,n):t.value.data),a?e:Cr(r,e,o,s)})}Object.assign(Fr,{iterator:qe});function Ur(r){return{paginate:Object.assign(Fr.bind(null,r),{iterator:qe.bind(null,r)})}}Ur.VERSION=Bs;var Ns="13.2.2",Vs={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForEnterprise:["GET /enterprises/{enterprise}/copilot/usage"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createCustomOrganizationRole:["POST /orgs/{org}/organization-roles"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteCustomOrganizationRole:["DELETE /orgs/{org}/organization-roles/{role_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],patchCustomOrganizationRole:["PATCH /orgs/{org}/organization-roles/{role_id}"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}},zs=Vs,X=new Map;for(const[r,e]of Object.entries(zs))for(const[o,s]of Object.entries(e)){const[t,a,n]=s,[i,c]=t.split(/ /),p=Object.assign({method:i,url:c},a);X.has(r)||X.set(r,new Map),X.get(r).set(o,{scope:r,methodName:o,endpointDefaults:p,decorations:n})}var Ms={has({scope:r},e){return X.get(r).has(e)},getOwnPropertyDescriptor(r,e){return{value:this.get(r,e),configurable:!0,writable:!0,enumerable:!0}},defineProperty(r,e,o){return Object.defineProperty(r.cache,e,o),!0},deleteProperty(r,e){return delete r.cache[e],!0},ownKeys({scope:r}){return[...X.get(r).keys()]},set(r,e,o){return r.cache[e]=o},get({octokit:r,scope:e,cache:o},s){if(o[s])return o[s];const t=X.get(e).get(s);if(!t)return;const{endpointDefaults:a,decorations:n}=t;return n?o[s]=Ks(r,e,s,a,n):o[s]=r.request.defaults(a),o[s]}};function Ws(r){const e={};for(const o of X.keys())e[o]=new Proxy({octokit:r,scope:o,cache:{}},Ms);return e}function Ks(r,e,o,s,t){const a=r.request.defaults(s);function n(...i){let c=a.endpoint.merge(...i);if(t.mapToData)return c=Object.assign({},c,{data:c[t.mapToData],[t.mapToData]:void 0}),a(c);if(t.renamed){const[p,m]=t.renamed;r.log.warn(`octokit.${e}.${o}() has been renamed to octokit.${p}.${m}()`)}if(t.deprecated&&r.log.warn(t.deprecated),t.renamedParameters){const p=a.endpoint.merge(...i);for(const[m,u]of Object.entries(t.renamedParameters))m in p&&(r.log.warn(`"${m}" parameter is deprecated for "octokit.${e}.${o}()". Use "${u}" instead`),u in p||(p[u]=p[m]),delete p[m]);return a(p)}return a(...i)}return Object.assign(n,a)}function Dr(r){const e=Ws(r);return{...e,rest:e}}Dr.VERSION=Ns;var Js="20.1.1",Zs=$s.plugin(Rr,Dr,Ur).defaults({userAgent:`octokit-rest.js/${Js}`});const Xs={beforeDevCommand:"yarn dev",beforeBuildCommand:"yarn build",devPath:"http://localhost:5173",distDir:"../dist",withGlobalTauri:!1},Ys={allowlist:{all:!0,fs:{all:!0,scope:["**"]},shell:{all:!0,open:!0,sidecar:!0,scope:[{name:"iib_api_server",sidecar:!0}]}},bundle:{active:!0,targets:"all",identifier:"com.zanllp.iib",icon:["icons/32x32.png","icons/128x128.png","icons/128x128@2x.png","icons/icon.icns","icons/icon.ico"],externalBin:["iib_api_server"]},security:{csp:null},windows:[{fullscreen:!1,resizable:!0,fileDropEnabled:!1,title:"Infinite Image Browsing",width:800,height:600,maximized:!0}]},Qs={build:Xs,package:{productName:"Infinite Image Browsing",version:"0.17.1"},tauri:Ys},Lr=new Zs,et="v"+Qs.package.version,Q=j(),Ce=j(""),Ir=j(""),xr=j(""),ee=D(()=>({tag:xr.value||et,hash:Ir.value})),rt=D(()=>Ce.value?Ce.value!==ee.value.tag:!1);async function ot(r,e){try{return(await Lr.repos.listCommits({owner:r,repo:e,per_page:1})).data[0]}catch(o){console.error("Error fetching the latest commit:",o)}}async function st(r,e){try{return(await Lr.repos.getLatestRelease({owner:r,repo:e})).data}catch(o){console.error("Error fetching the latest release:",o)}}const ar="zanllp",ir="sd-webui-infinite-image-browsing";mo(500+500*Math.random()).then(async()=>{ho().then(e=>{xr.value=e.tag??"",Ir.value=e.hash??""}),Q.value=await ot(ar,ir);const r=await st(ar,ir);Ce.value=(r==null?void 0:r.tag_name)??""});const we=r=>(_o("data-v-ff7fc912"),r=r(),wo(),r),tt={class:"container"},nt={class:"header"},at={key:0,style:{"margin-left":"16px","font-size":"1.5em"}},it=we(()=>T("div",{"flex-placeholder":""},null,-1)),ct=we(()=>T("a",{href:"https://github.com/zanllp/sd-webui-infinite-image-browsing",target:"_blank",class:"last-record"},"Github",-1)),lt={href:"https://github.com/zanllp/sd-webui-infinite-image-browsing/blob/main/.env.example",target:"_blank",class:"last-record"},ut=we(()=>T("a",{href:"https://github.com/zanllp/sd-webui-infinite-image-browsing/releases",target:"_blank",class:"last-record"},"Releases",-1)),pt={href:"https://github.com/zanllp/sd-webui-infinite-image-browsing/wiki/Change-log",target:"_blank",class:"last-record"},dt={href:"https://github.com/zanllp/sd-webui-infinite-image-browsing/issues/90",target:"_blank",class:"last-record"},gt={class:"access-mode-message"},mt=we(()=>T("div",{"flex-placeholder":""},null,-1)),ht={class:"content"},Tt={class:"feature-item"},Et={class:"text line-clamp-1"},ft=["onClick"],bt={class:"text line-clamp-2"},vt={key:0,class:"feature-item"},_t={class:"text line-clamp-1"},wt=["onClick"],yt={class:"text line-clamp-2"},kt={key:0,class:"fixed"},Pt={class:"feature-item"},Gt=["onClick"],Ot={class:"text line-clamp-1"},St={class:"text line-clamp-1"},At={class:"text line-clamp-1"},Rt={class:"text line-clamp-1"},Ft={key:1,class:"feature-item recent"},Ct={class:"title"},Ut=["onClick"],Dt={class:"text line-clamp-1"},Lt={class:"ver-info"},It={key:0},xt={key:1},jt={key:2},$t=M({__name:"emptyStartup",props:{tabIdx:{},paneIdx:{},popAddPathModal:{}},setup(r){const e=r,o=dr(),s=To();Eo(()=>{e.popAddPathModal&&Pe(e.popAddPathModal.type,e.popAddPathModal.path)});const t={local:R("local"),"tag-search":R("imgSearch"),"fuzzy-search":R("fuzzy-search"),"global-setting":R("globalSettings"),"batch-download":R("batchDownload")+" / "+R("archive")},a=(l,E,k)=>{let g;switch(l){case"grid-view":case"tag-search-matched-image-grid":case"img-sli":return;case"global-setting":case"tag-search":case"batch-download":case"fuzzy-search":case"empty":g={type:l,name:t[l],key:Date.now()+ke()};break;case"local":g={type:l,name:t[l],key:Date.now()+ke(),path:E,mode:k==="scanned-fixed"||k==="walk"?k:"scanned"}}return g},n=(l,E,k)=>{const g=a(l,E,k);if(!g)return;const w=o.tabList[e.tabIdx];w.panes.splice(e.paneIdx,1,g),w.key=g.key},i=(l,E,k)=>{const g=a(l,E,k);if(!g)return;o.tabList[e.tabIdx].panes.push(g)},c=(l,E,k)=>{const g=a(l,E,k);if(!g)return;let w=o.tabList[e.tabIdx+1];w||(w={panes:[],key:"",id:ke()},o.tabList[e.tabIdx+1]=w),w.panes.push(g),w.key=g.key},p=D(()=>{var l;return(l=o.tabListHistoryRecord)==null?void 0:l[1]}),m=D(()=>o.quickMovePaths.filter(({key:l,types:E})=>l==="outdir_txt2img_samples"||l==="outdir_img2img_samples"||l==="outdir_txt2img_grids"||l==="outdir_img2img_grids"||E.includes("walk"))),u=window.parent!==window,b=()=>window.parent.open("/infinite_image_browsing"+(window.parent.location.href.includes("theme=dark")?"?__theme=dark":"")),y=()=>{fo(p.value),o.tabList=bo(p.value.tabs)},S=D(()=>{var l;return gr?"desktop application":((l=o.conf)==null?void 0:l.launch_mode)==="sd"?"sd-webui extension":"standalone"}),A=l=>!l||l==="scanned"?"":l==="walk"?"Walk: ":"Fixed: ",_=D(()=>{var E,k;const l=[];return(E=o.conf)!=null&&E.enable_access_control&&l.push("accessLimited"),(k=o.conf)!=null&&k.is_readonly&&l.push("readonly"),l.map(g=>R(g)).join(" + ")});return(l,E)=>{var I,V,Z,W;const k=Ee,g=pe,w=Le,q=vo,L=mr;return O(),F("div",tt,[T("div",nt,[T("h1",null,v(l.$t("welcome")),1),(I=f(o).conf)!=null&&I.enable_access_control&&f(o).dontShowAgain?(O(),F("div",at,[h(f(Me),{title:"Access Control mode",style:{"vertical-align":"text-bottom"}})])):H("",!0),it,ct,T("a",lt,v(l.$t("privacyAndSecurity")),1),h(k,{count:f(rt)?"new":null,offset:[2,0],color:"geekblue"},{default:U(()=>[ut]),_:1},8,["count"]),T("a",pt,v(l.$t("changlog")),1),T("a",dt,v(l.$t("faq")),1),h(w,{value:f(o).darkModeControl,"onUpdate:value":E[0]||(E[0]=d=>f(o).darkModeControl=d),"button-style":"solid"},{default:U(()=>[h(g,{value:"light"},{default:U(()=>[$("Light")]),_:1}),h(g,{value:"auto"},{default:U(()=>[$("Auto")]),_:1}),h(g,{value:"dark"},{default:U(()=>[$("Dark")]),_:1})]),_:1},8,["value"])]),(V=f(o).conf)!=null&&V.enable_access_control&&!f(o).dontShowAgain?(O(),Te(q,{key:0,"show-icon":""},{message:U(()=>[T("div",gt,[T("div",null,v(l.$t("accessControlModeTips")),1),mt,T("a",{onClick:E[1]||(E[1]=z(d=>f(o).dontShowAgain=!0,["prevent"]))},v(l.$t("dontShowAgain")),1)])]),icon:U(()=>[h(f(Me))]),_:1})):H("",!0),T("div",ht,[T("div",Tt,[T("h2",null,v(l.$t("walkMode")),1),T("ul",null,[T("li",{onClick:E[2]||(E[2]=d=>f(Pe)("walk")),class:"item"},[T("span",Et,[h(f(He)),$(" "+v(l.$t("add")),1)])]),(O(!0),F(K,null,ae(m.value,d=>(O(),Te(Je,{key:d.key,onOpenInNewTab:G=>i("local",d.dir,"walk"),onOpenOnTheRight:G=>c("local",d.dir,"walk")},{default:U(()=>[T("li",{class:"item rem",onClick:z(G=>n("local",d.dir,"walk"),["prevent"])},[T("span",bt,v(d.zh),1),d.can_delete?(O(),F(K,{key:0},[h(L,{type:"link",onClick:z(G=>f(Ke)(d.dir),["stop"])},{default:U(()=>[$(v(l.$t("alias")),1)]),_:2},1032,["onClick"]),h(L,{type:"link",onClick:z(G=>f(We)(d.dir,"walk"),["stop"])},{default:U(()=>[$(v(l.$t("remove")),1)]),_:2},1032,["onClick"])],64)):H("",!0)],8,ft)]),_:2},1032,["onOpenInNewTab","onOpenOnTheRight"]))),128))])]),f(o).quickMovePaths.length?(O(),F("div",vt,[T("h2",null,v(l.$t("launchFromNormalAndFixed")),1),T("ul",null,[T("li",{onClick:E[3]||(E[3]=d=>f(Pe)("scanned")),class:"item"},[T("span",_t,[h(f(He)),$(" "+v(l.$t("add")),1)])]),(O(!0),F(K,null,ae(f(o).quickMovePaths.filter(({types:d})=>d.includes("cli_access_only")||d.includes("preset")||d.includes("scanned")||d.includes("scanned-fixed")),d=>(O(),F(K,{key:d.key},[(O(!0),F(K,null,ae(d.types.filter(G=>G!=="walk"),G=>(O(),Te(Je,{key:G,onOpenInNewTab:B=>i("local",d.dir,G),onOpenOnTheRight:B=>c("local",d.dir,G)},{default:U(()=>[T("li",{class:"item rem",onClick:z(B=>n("local",d.dir,G),["prevent"])},[T("span",yt,[G=="scanned-fixed"?(O(),F("span",kt,"Fixed")):H("",!0),$(v(d.zh),1)]),d.can_delete&&(G==="scanned-fixed"||G==="scanned")?(O(),F(K,{key:0},[h(L,{type:"link",onClick:z(B=>f(Ke)(d.dir),["stop"])},{default:U(()=>[$(v(l.$t("alias")),1)]),_:2},1032,["onClick"]),h(L,{type:"link",onClick:z(B=>f(We)(d.dir,G),["stop"])},{default:U(()=>[$(v(l.$t("remove")),1)]),_:2},1032,["onClick"])],64)):H("",!0)],8,wt)]),_:2},1032,["onOpenInNewTab","onOpenOnTheRight"]))),128))],64))),128))])])):H("",!0),T("div",Pt,[T("h2",null,v(l.$t("launch")),1),T("ul",null,[(O(!0),F(K,null,ae(Object.keys(t),d=>(O(),F("li",{key:d,class:"item",onClick:z(G=>n(d),["prevent"])},[T("span",Ot,v(t[d]),1)],8,Gt))),128)),T("li",{class:"item",onClick:E[4]||(E[4]=d=>f(s).opened=!0)},[T("span",St,v(l.$t("imgCompare")),1)]),u?(O(),F("li",{key:0,class:"item",onClick:b},[T("span",At,v(l.$t("openInNewWindow")),1)])):H("",!0),(Z=p.value)!=null&&Z.tabs.length?(O(),F("li",{key:1,class:"item",onClick:y},[T("span",Rt,v(l.$t("restoreLastRecord")),1)])):H("",!0)])]),f(o).recent.length?(O(),F("div",Ft,[T("div",Ct,[T("h2",null,v(l.$t("recent")),1),h(L,{onClick:E[5]||(E[5]=d=>f(o).recent=[]),type:"link"},{default:U(()=>[$(v(l.$t("clear")),1)]),_:1})]),T("ul",null,[(O(!0),F(K,null,ae(f(o).recent,d=>(O(),F("li",{key:d.key,class:"item",onClick:z(G=>n("local",d.path,d.mode),["prevent"])},[h(f(Ho),{class:"icon"}),T("span",Dt,v(A(d.mode))+v(f(o).getShortPath(d.path)),1)],8,Ut))),128))])])):H("",!0)]),T("div",Lt,[T("div",null," Mode: "+v(_.value),1),T("div",null," Version: "+v(f(ee).tag)+" ("+v(S.value)+") ",1),f(ee).hash?(O(),F("div",It," Hash: "+v(f(ee).hash),1)):H("",!0),f(Q)&&f(ee).hash&&f(Q).sha!==f(ee).hash?(O(),F("div",xt," Not the latest commit ")):H("",!0),f(Q)?(O(),F("div",jt," Latest Commit: "+v(f(Q).sha)+" (Updated at "+v((W=f(Q).commit.author)==null?void 0:W.date)+") ",1)):H("",!0)])])}}});const zt=yo($t,[["__scopeId","data-v-ff7fc912"]]);export{zt as default};
